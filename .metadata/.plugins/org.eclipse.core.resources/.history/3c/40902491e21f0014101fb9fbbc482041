package maze.maze;

import maze.utils.Defines;

public class Maze {
	private int[][] maze;
	private Coordinate entrance;
	private Coordinate exit;
	
	public Maze(){
		this.maze = new int[Defines.basicMazeSize][Defines.basicMazeSize];
		for(int i = 0 ; i < Defines.basicMazeSize ; i++){
			for(int j = 0 ; j< Defines.basicMazeSize ; j++){
				this.maze[i][j] = Defines.empty;;
			}
		}
		
		entrance = new Coordinate(0,0);
		exit = new Coordinate(Defines.basicMazeSize-1,Defines.basicMazeSize-1);
		
	}
	
	
	public Maze(int width){
		this.maze = new int[width][width];
		
		for(int i = 0 ; i < width ; i++){
			for(int j = 0 ; j< width ; j++){
				this.maze[i][j] = Defines.empty;
			}
		}
		
		this.entrance = new Coordinate(0,0);
		this.exit = new Coordinate(width-1,width-1);
	}
	
	
	public Maze(boolean setPreset){
		this.maze = new int[Defines.basicMazeSize][Defines.basicMazeSize];
		
		if(setPreset == true){	
			for(int i = 0 ; i < Defines.basicMazeSize ; i++){
				for(int j = 0 ; j< Defines.basicMazeSize ; j++){
					this.maze[i][j] = Defines.wallPreset[i][j];
				}
			}
		}
		
		else{
			for(int i = 0 ; i < Defines.basicMazeSize ; i++){
				for(int j = 0 ; j< Defines.basicMazeSize ; j++){
					this.maze[i][j] = Defines.empty;
				}
			}
		}
		
		this.entrance = new Coordinate(0,0);
		this.exit = new Coordinate(Defines.basicMazeSize-1,Defines.basicMazeSize-1);
		
	}
	
	public Coordinate getMazeEntrance(){
		 return this.entrance;
	}
	
	public Coordinate getMazeExit(){
		return this.exit;
	}
}	


