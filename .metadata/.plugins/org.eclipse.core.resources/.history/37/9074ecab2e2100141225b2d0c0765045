package maze.finder;

import maze.maze.Maze;
import maze.utils.Coordinate;
import maze.utils.CoordinateWithDirections;
import maze.utils.Defines;

public class Finder implements Runnable{

	
	public static int finderIdConstructor = Defines.finderIdConstructor;
	public FinderHistory fHistory;
	public int visitOrder;
	public int finderId;
	public Coordinate startPos;
	public Coordinate endPos;
	long startTime;
	


	//Finder�뒗 湲몄쓣 李얜뒗 �뿭�븷. fHistory�뿉�꽌 �뿬�깭源뚯� 媛붾뜕湲몄쓣 stack�쑝濡� 愿�由ы븳�떎. visitorder�뒗 �떆怨꾨갑�뼢�쑝濡� �깘�깋�븷吏�,  �떆怨꾨컲��諛⑺뼢�쑝濡� 湲몄쓣 �깘�깋�븷吏� 寃곗젙�븳�떎.
	//FinderId�뒗 �벐�젅�뱶濡� �몢紐낅룎由대븣 �몮�씠 媛�蹂멸납�쓣 援щ퀎�븷�븣 �궗�슜�븳�떎. startpos�뒗 �씠 finder媛� 湲몄갼湲� �깘�깋�쓣 �떆�옉�븷 �쐞移�, endpos�뒗 maze�쓽 異�
	public Finder(int visitOrder, Coordinate startPos, Coordinate endPos){
		this.fHistory = new FinderHistory();
		this.visitOrder = visitOrder;
		this.finderId = Finder.finderIdConstructor++;
		this.startPos = startPos;
		this.endPos = endPos;
		
	}
	
	
	
	public void startFindWay(){
		startTime = System.currentTimeMillis();
		Coordinate currentPos = this.startPos.clone();
		Coordinate nextPos = null;
		CoordinateWithDirections tmp;
		int nextDirection;
		
		do {
			
			nextDirection = Defines.N+visitOrder;
			
			
			while(nextDirection-visitOrder <= Defines.searchDirection){

				Maze.setMazeLocationInfo(currentPos, this.finderId);
				nextPos = currentPos.addCoordinate(Defines.movePos.get(nextDirection));
	
				//��吏곸씪 �떎�쓬 醫뚰몴�쓽 媛믪씠 踰쎈낫�떎 �겙 媛믪씠硫댁꽌(1蹂대떎 �겙 媛믪씠硫댁꽌), finder�쓽 ID媛� �븘�땺�븣�뒗 �떎瑜� �벐�젅�뱶�뿉 �쓽�빐 李얠븘吏� 湲몄씠誘�濡� break; 
				if(Maze.getMazeLocationInfo(nextPos) > Defines.wall && Maze.getMazeLocationInfo(nextPos)!= this.finderId)
					break;
				
				
				else{
					//�떎�쓬 ��吏곸씪 諛⑺뼢�쓽 媛믪씠 searchDirection(4諛⑺뼢 �깘�깋�쓽 寃쎌슦 4, 8諛⑺뼢 �깘�깋�쓽 寃쎌슦 8)怨� 媛숈쓣 寃쎌슦, 洹� 醫뚰몴�뿉 �깘�깋�씠 �걹�궃寃껋씠誘�濡� �씠�쟾�쐞移섎줈 �릺�룎�븘 媛��빞�븳�떎.
					//�뵲�씪�꽌 �쐞移섎�� pop�븯�뿬 �씠�쟾�쓽 �옣�냼瑜� currentPos濡� 蹂�寃쏀빐�빞�븿
					if (nextDirection-visitOrder == Defines.searchDirection) {
						tmp = fHistory.popLocation();
						while(tmp.getDirection() == Defines.searchDirection)
							tmp = fHistory.popLocation();
					
						Maze.setMazeLocationInfo(currentPos, Defines.empty);
						currentPos = new Coordinate(tmp);
						nextDirection = tmp.getDirection()+visitOrder;
					}
					
					//�떎�쓬 ��吏곸씪 醫뚰몴媛� valid�븯硫댁꽌(0 <= X醫뚰몴, Y醫뚰몴 < 8), 鍮꾩뼱�엳�뒗 寃쎌슦(0�씪 寃쎌슦)�뿉�뒗 �쁽�옱�쐞移섎�� �뫖�돩�븯怨�, �떎�쓬 醫뚰몴濡� �씠�룞�븯怨� �씠諛섎났臾� break;
					else if(Maze.isValidLocation(nextPos) && Maze.getMazeLocationInfo(nextPos) == Defines.empty){
						fHistory.pushLocation(Coordinate.toCoordianteWithDirections(currentPos,++nextDirection));
						currentPos = new Coordinate(nextPos);
						break;
					}
					
					//�쐞�뿉以� �뼱�뼚�븳 寃껋뿉�룄 �빐�떦�븯吏� �븡�뒗 寃쎌슦�뒗 �떎�쓬 諛⑺뼢�쑝濡� �깘�깋�쓣 �븯�뒗 寃껋씠誘�濡� nextDirection�쓽 媛믪쓣 1利�
					else{
						nextDirection++;
					}
		
				}
			}
				
		//�쐞�쓽 諛섎났臾몄쓣 異쒓뎄瑜� 李얘굅�굹, �떎瑜� �벐�젅�뱶媛� 寃��깋�븳 怨녹뿉 �룄�떖�븷 �븣源뚯� 諛� 
		//while議곌굔�쓣 泥댄겕�븯�뒗 �떆�젏�뿉�꽌 nextPos�� currentPos�뒗 媛숇떎. 
		}while(!nextPos.equals(Maze.getMazeExit()) && !(Maze.getMazeLocationInfo(nextPos) > Defines.wall && Maze.getMazeLocationInfo(nextPos)!= this.finderId) );
			
		fHistory.pushLocation(Coordinate.toCoordianteWithDirections(currentPos,++nextDirection));
		
	}
	
	

	@Override
	public String toString() {
		StringBuilder finderInfo = new StringBuilder();
		finderInfo.append(String.format("ThreadName : %s\nStartTime : %s\nOperationTime : %s\nTotalNumsOfStackPushed : %s\n",Thread.currentThread().getName(), Long.toString(startTime),	(System.currentTimeMillis()-startTime), Integer.toString(this.fHistory.stackInputCount)));
		
		return finderInfo.toString();
		
		
	}



	@Override
	public void run() {
		this.startFindWay();
		System.out.println(this);
	}
	
	

	
}
