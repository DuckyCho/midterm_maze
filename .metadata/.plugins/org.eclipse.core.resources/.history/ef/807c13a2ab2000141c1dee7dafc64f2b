package maze.utils;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Properties;

public class Defines {
	
	/*are used when maze is built, some of constants are also used when Finder checks status of maze*/
	public static final int wall = 1;
	public static final int empty = 0;
	public static final int unvalid =  -1;
	public static final boolean fail = false;
	public static final int finderIdConstructor = 2;
	public static final int basicMazeSize = 8;
	public static final int[][] wallPreset = {
		{0,1,1,1,0,1,1,1},
		{0,0,0,1,0,0,0,0},
		{1,1,0,0,0,1,0,1},
		{1,1,0,1,1,1,0,1},
		{1,0,0,1,0,0,0,0},
		{0,1,1,1,0,1,1,1},
		{1,0,1,1,0,0,0,0},
		{0,1,1,0,1,1,1,0}
		};
	
	
	/*directions*/
	public static final int N = 0;
	public static final int NE = 1;
	public static final int E = 2;
	public static final int ES = 3;
	public static final int S = 4;
	public static final int SW = 5;
	public static final int W = 6;
	public static final int WN = 7;
	public static final int NN = 8;
		
		
	/*are used when Finder explores the maze*/
	
	public static ArrayList<Coordinate> movePos; 
	public static final int inorder = 0;
	public static int inverse;
	public static int searchDirection;
	public static int theNumberOfFinder;
	public static boolean operationComparisonMode;
	
	private static Defines d1 = new Defines();
	
	private Defines(){
		try {
			Defines.setProperties();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	//searchDirection�뙆�씪�쓣 �씫�뼱�뱾�뿬 property瑜� �꽕�젙
	//invsere, searchDirection, movePos�뼱�젅�씠瑜� �꽕�젙媛믪뿉 �뵲�씪 蹂�寃�
	private static void setProperties() throws IOException{
				
		Properties props = new Properties();
		FileInputStream in = new FileInputStream("Properties");
		props.load(in);
		operationComparisonMode = Boolean.valueOf(props.getProperty("operationComparisonMode"))
		theNumberOfFinder = Integer.valueOf(props.getProperty("howManyFinder"));
		searchDirection = Integer.valueOf(props.getProperty("searchDirection"));
		inverse = searchDirection;
		
		if(searchDirection == 4){
			movePos = new ArrayList<Coordinate>(); 
			
			movePos.add(new Coordinate(0,-1));
			movePos.add(new Coordinate(1,0));
			movePos.add(new Coordinate(0,1));
			movePos.add(new Coordinate(-1,0));
			
			movePos.add(new Coordinate(0,-1));
			movePos.add(new Coordinate(-1,0));
			movePos.add(new Coordinate(0,1));
			movePos.add(new Coordinate(1,0));
		}
		
		else if(searchDirection == 8){
			movePos = new ArrayList<Coordinate>(); 
			
			movePos.add(new Coordinate(0,-1));
			movePos.add(new Coordinate(1,-1));
			movePos.add(new Coordinate(1,0));
			movePos.add(new Coordinate(1,1));
			movePos.add(new Coordinate(0,1));
			movePos.add(new Coordinate(-1,1));
			movePos.add(new Coordinate(-1,0));
			movePos.add(new Coordinate(-1,-1));
			
			movePos.add(new Coordinate(0,-1));
			movePos.add(new Coordinate(-1,-1));
			movePos.add(new Coordinate(-1,0));
			movePos.add(new Coordinate(-1,1));
			movePos.add(new Coordinate(0,1));
			movePos.add(new Coordinate(1,1));
			movePos.add(new Coordinate(1,0));
			movePos.add(new Coordinate(1,-1));
		}
	
	}
	
	
}
